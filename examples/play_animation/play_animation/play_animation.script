go.property("speed", 200) -- the speed of movement

-- play animation unless the same animation is already playing
local function play_animation(self, animation)
	if self.current_animation ~= animation then
		self.current_animation = animation
		sprite.play_flipbook("#sprite", animation)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.direction = vmath.vector3(0, 0, 0) -- the current direction of movement
	self.actions = {} -- mapping of input states (action_id mapped to pressed state)
	self.current_animation = nil -- the current animation
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.actions[hash("left")] then
		play_animation(self, hash("player_walk"))
		sprite.set_hflip("#sprite", true)
		self.direction.x = -self.speed
	elseif self.actions[hash("right")] then
		play_animation(self, hash("player_walk"))
		sprite.set_hflip("#sprite", false)
		self.direction.x = self.speed
	else
		self.direction.x = 0
	end

	if self.actions[hash("up")] then
		play_animation(self, hash("player_walk"))
		self.direction.y = self.speed
	elseif self.actions[hash("down")] then
		play_animation(self, hash("player_walk"))
		self.direction.y = -self.speed
	else
		self.direction.y = 0
	end
	
	if self.direction.x == 0 and self.direction.y == 0 then
		play_animation(self, hash("player_idle"))
	end
	
	go.set_position(go.get_position() + self.direction * dt)

	msg.post("@render:", "draw_text", { text = "Move using arrow keys", position = vmath.vector3(10, 100, 0) } )
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.actions[action_id] = true
		elseif action.released then
			self.actions[action_id] = false
		end
	end
end
