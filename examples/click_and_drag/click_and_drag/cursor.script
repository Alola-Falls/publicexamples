function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#collisionobject", "disable")
	self.collision_id = nil
	self.dragged_id = nil
	self.dragged_pos = nil
	self.pressed = false
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	msg.post("@render:", "clear_color", { color = vmath.vector4(95 /256, 129 / 256, 161 / 256, 1 ) })
	self.collision_id = nil
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if not self.collision_id or go.get_position(self.collision_id).z < message.other_position.z then
			self.collision_id = message.other_id
		end	
	end
end

function on_input(self, action_id, action)
	if not action_id or action_id == hash("touch") then
		local action_pos = vmath.vector3(action.x, action.y, 0)
		
		-- update cursor position
		go.set_position(action_pos)
		
		-- keep track of click/touch state
		if action.pressed then
			msg.post("#collisionobject", "enable")
			self.pressed = true
		elseif action.released then
			msg.post("#collisionobject", "disable")
			self.pressed = false
			self.dragged_id = nil
			self.dragging = false
		end
		
		-- if click/touch
		-- and the cursor has collided with something
		-- and we're currently not dragging anything
		-- then set whatever we touched as the thing to potentially drag
		if self.pressed and self.collision_id and not self.dragged_id then
			self.dragged_id = self.collision_id
			self.dragged_pos = action_pos
		end
		
		-- we're dragging if we have clicked/touched something and moved the mouse/finger "enough"
		if self.dragged_id and vmath.length(self.dragged_pos - action_pos) > 20 then
			self.dragging = true
		end
		
		-- update position of dragged object if we're dragging something
		if self.dragging then
			go.set_position(action_pos, self.dragged_id)
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
