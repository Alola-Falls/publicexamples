local HTML = [[
Defold webview example</br></br>
<a href="%s://close_webview/%d">CLOSE</a>
]]


-- get the packagename or bundle identifier
-- this is used as the base url when communicating back with the app
-- via the iac interface
local function iac_base_url()
	local is_android = sys.get_sys_info().system_name == "Android"
	local is_ios = sys.get_sys_info().system_name == "iPhone OS"
	if is_android then
		return sys.get_config("android.package")
	elseif is_ios then
		return sys.get_config("ios.bundle_identifier")
	else
		return nil
	end
end


function init(self)
	if not iac or not webview then
		print("You can only test this on platforms where iac.* and webview.* are supported")
		return
	end

	-- use the iac module to detect when the close link was clicked in the webview
	-- extract the webview id and destroy it
	iac.set_listener(function(self, payload, type)
		local webview_id = string.match(payload.url, "/close_webview/(.*)")
		if webview_id then
			webview.destroy(tonumber(webview_id))
		end
	end)
	msg.post(".", "acquire_input_focus")
end

function update(self, dt)
	msg.post("@render:", "draw_text", { text = "CLICK TO OPEN A WEBVIEW", position = vmath.vector3(20, 30, 0) })
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.9, 0.9, 0.9, 1.0) })
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		local webview_id = webview.create(function(self, webview_id, request_id, type, data)
			-- do nothing
		end)

		-- inject the application base url and the webview id
		local html = HTML:format(iac_base_url(), webview_id)
		webview.open_raw(webview_id, html)
	end
end